loadpkg <- function(pkg, url=NULL){
    if (! pkg %in% rownames(installed.packages())){
        if (is.null(url)){
            install.packages(pkg)
        }else{
            if (! 'devtools' %in% rownames(installed.packages())){
                install.packages('devtools')
            }
            require(devtools)
            install_github(url)
        }
    }
    require(package=pkg,c=T)
}
#-----------recharts--------------------
##----------presiquite function---------
evalFormula = function(x, data) { # by yihui xie
    if (!inherits(x, 'formula')) return(x)
    if (length(x) != 2) stop('The formula must be one-sided: ', deparse(x))
    eval(x[[2]], data, environment(x))
}
mergeList = function(x, y) { # by yihui xie
    if (!is.list(y) || length(y) == 0) return(x)
    yn = names(y)
    if (length(yn) == 0 || any(yn == '')) {
        warning('The second list to be merged into the first must be named')
        return(x)
    }
    for (i in yn) {
        xi = x[[i]]
        yi = y[[i]]
        if (is.list(xi)) {
            if (is.list(yi)) x[[i]] = mergeList(xi, yi)
        } else x[[i]] = yi
    }
    return(x)
}
##----------draw dynamic charts using recharts---------------
echartR<-function(data,x,y,series=NULL,weight=NULL,type="scatter",stack=FALSE,
                  title=NULL,subtitle=NULL,
                  xlab=NULL,ylab=NULL,xyflip=FALSE,AxisAtZero=TRUE,scale=TRUE,
                  aetna_palette='green',tooltip=TRUE,legend=TRUE,toolbox=TRUE,
                  calculable=TRUE){
    type <- tolower(type)
    if (!type %in% c('scatter','bar','line','map','k','pie','chord','force',
                     'tree','treemap','wordcloud','heatmap','histogram','bubble',
                     'ring')){
        stop("The chart type is not supported! ",
             "we now only support following charts:\n",
             "scatter, bar, line, map, k, pie, chord, force, bubble, ",
             "tree, treemap, wordcloud, heatmap, histogram,ring")
    }
    loadpkg("Hmisc")
    loadpkg("reshape2")
    loadpkg("recharts","yihui/recharts")
    aetPal <- aetnaPal(tolower(aetna_palette))
    if (is.null(aetPal)){
        lstColor <- NULL
    }else{
        lstColor <- as.list(aetPal)
    }
    lstTitle <- list(text=ifelse(is.null(title),"",title),
                     subtext=ifelse(is.null(subtitle),"",subtitle),
                     x='center',y='bottom',padding=c(25,5,5,5))
    if (tooltip){
        lstTooltip <- list(
            trigger=ifelse(type %in% c('pie','ring'),
                           'item','axis'),
            axisPointer = list(
                show= T,lineStyle= list(type= 'dashed',width= 1)
            ),
            showDelay = 0
        )
        if (type %in% c('scatter','bubble')){
            if (!is.null(series)){
                lstTooltip[['formatter']] <- JS('function (params) {
                    if (params.value.length > 1) {
                        return params.seriesName + " :<br/>"
                        + params.value[0] + " ,    " +
                        + params.value[1];
                    } else {
                        return params.seriesName + " :<br/>"
                        + params.name + " : "
                        + params.value;
                    }
                }')
            }
            lstTooltip[['axisPointer']] <- list(
                show= T,type='cross',lineStyle= list(type= 'dashed',width= 1)
            )
        }else if (type %in% c('ring','pie')){
            lstTooltip[['formatter']] <- "{a} <br/>{b} : {c} ({d}%)"
        }
    }else{
        lstTooltip = list(show=FALSE)
    }
    if (toolbox){
        lstToolbox= list(
            show = TRUE,
            feature = list(
                mark =list(show= TRUE),
                dataView = list(show= TRUE, readOnly= TRUE),
                magicType = list(show=FALSE),
                restore = list(show= TRUE),
                saveAsImage = list(show= TRUE)
            )
        )
        
        if (type %in% c('line','bar')){
            lstToolbox[['feature']][['magicType']] <- 
                list(show=TRUE, type= c('line','bar','tiled','stack'))
        }else if (type %in% c('funnel','ring','pie')){
            lstToolbox[['feature']][['magicType']] <- 
                list(show=TRUE, type= c('pie','funnel'),
                     option=list(funnel=list(x='25%',width='50%',
                                             funnelAlign='center')))
        }
    }else{
        lstToolbox=list(show=FALSE)
    }
    
    if (!is.null(x)) xvar <- substr(deparse(x),2,nchar(deparse(x)))
    if (!is.null(y)) yvar <- substr(deparse(y),2,nchar(deparse(y)))
    if (!is.null(series)) svar <- substr(deparse(series),2,nchar(deparse(series)))
    if (!is.null(weight)) wvar <- substr(deparse(weight),2,nchar(deparse(weight)))
    if (!is.null(x)) x <- evalFormula(x,data)
    if (!is.null(y)) y <- evalFormula(y,data)
    if (!is.null(series)) series <- evalFormula(series,data)
    if (!is.null(weight)) weight <- evalFormula(weight,data)
    
    #-------pre-process of data-----------
    if (type %in% c('bubble') & is.null(weight)){
        wvar <- yvar
        weight <- y
    }
    if (type %in% c('pie','ring')){
        if (is.null(series) & !is.null(x)){
            svar <- xvar
            series <- x
        }

        series <- as.factor(series)
        data <- data[,c(svar,yvar)]
        if (is.factor(y)){
            data <- dcast(data,data[,1]~.,value.var=yvar,length)
        }else{
            data <- dcast(data,data[,1]~.,value.var=yvar,sum)
        }
        names(data) <- c(svar,yvar)
    }
    
    if (!legend){
        lstLegend= list(show=FALSE)
    }else if (!is.null(series)){ 
        lstLegend= list(show=TRUE, data=levels(as.factor(series)))
    }else{
        lstLegend= list(show=TRUE, data=levels(x))
    }
    if (!xyflip){
        lstXAxis = list(
            name = ifelse(is.null(xlab),xvar,xlab),
            type = ifelse(is.factor(x),'category','value'),
            scale = scale,
            axisLine = list(show=T, onZero=AxisAtZero),
            data = list()
        )
        if (is.factor(x)){
            lstXAxis[['data']] <- unique(x)
        }
        lstYAxis = list(
            name = ifelse(is.null(ylab),yvar,ylab),
            type = 'value',
            scale = scale,
            axisLine = list(show=T, onZero=AxisAtZero),
            data = list()
        )
        
    }else{
        lstYAxis = list(
            name = ifelse(is.null(xlab),xvar,xlab),
            type = ifelse(is.factor(x),'category','value'),
            scale = scale,
            axisLine = list(show=T, onZero=AxisAtZero),
            data = list()
        )
        if (is.factor(x)) {
            lstYAxis[['data']] <- unique(x)
        }
        
        lstXAxis = list(
            name = ifelse(is.null(ylab),yvar,ylab),
            type = 'value',
            boundaryGap = c(0,0),
            scale = scale,
            axisLine = list(show=T, onZero=AxisAtZero),
            data = list()
        )
    }

    lstSeries <- list()
    if (is.null(weight)){
        symbolSizeFold <- 1
    }else{
        symbolSizeFold <- ifelse(max(weight)>50,1/ceiling(max(weight)/50),
                                 ceiling(2/min(weight)))
    }

    if (type %in% c('scatter','bubble')){
        if (is.null(series)){
            tmpMtx <- as.matrix(data[,c(xvar,yvar)])
            dimnames(tmpMtx) <- NULL
            lstSeries[[1]] <- list(
                type='scatter',
                data=tmpMtx
            )
            if (type=='bubble'){
                lstSeries[[1]][['data']] <-
                    as.matrix(data[,c(xvar,yvar,wvar)])
                lstSeries[[1]][['symbolSize']] <- 
                    JS('function (value){
                       return Math.round(value[2]*',symbolSizeFold,');
                    }')
            }
        }else{
            for (i in 1:ifelse(is.null(series),1,nlevels(series))){
                lstSeries[[i]] <- list(
                    name=  as.vector(levels(series)[i]),
                    type='scatter',
                    symbol='circle',
                    data=as.matrix(data[data[,svar]==
                                            levels(series)[i],c(xvar,yvar)])
                )
                if (type=='bubble'){
                    lstSeries[[i]][['data']] <-
                        as.matrix(data[data[,svar]==
                                           levels(series)[i],c(xvar,yvar,wvar)])
                    lstSeries[[i]][['symbolSize']] <- 
                        JS('function (value){
                            return Math.round(value[2]*',symbolSizeFold,');
                        }')
                }
            }
        }
    }else if (type %in% c('ring','pie')){
        lstSeries[[1]] <- list(
            name='',
            type='pie',
            data=list()
        )
        if (type=='ring'){
            lstSeries[[1]][['radius']] <- c('50%','70%')
            lstSeries[[1]][['itemStyle']] <- list(
                emphasis = list(
                    label=list(
                        show=TRUE, position='center',
                        textStyle=list(fontSize='30',fontWeight='bold')
                    )
                )
            )
        }else{
            lstSeries[[1]][['radius']] <- '60%'
            lstSeries[[1]][['center']] <- c('50%','50%')
        }
        for (i in 1:nrow(data)){
            lstSeries[[1]][['data']][[i]]<- list(
                value=data[i,2],name=as.character(data[i,1])
            )
        }
    }else{
        if (is.null(series)){
            lstSeries[[1]] <- list(
                type=type,
                data=data[,yvar]
            )
        }else{
            for (i in 1:ifelse(is.null(series),1,nlevels(series))){
                lstSeries[[i]] <- list(
                    name=as.vector(levels(series)[i]),
                    type=type,
                    data=data[data[,svar]==levels(series)[i],yvar]
                )
                if (stack){
                    lstSeries[[i]][['stack']] <- 'Stack'
                }
            }
        }
    }

    chartobj <- list(
        title=lstTitle,  tooltip=lstTooltip,
        toolbox=lstToolbox,
        calculable=calculable,
        series=lstSeries
    )
    if (!is.null(lstColor)) chartobj[['color']] <- lstColor
    if (!is.null(series))   chartobj[['legend']] <- lstLegend
    if (type %in% c('scatter','bubble','line','bar')){
        chartobj[['xAxis']] <- lstXAxis
        chartobj[['yAxis']] <- lstYAxis
    }
    echart(chartobj)
}






#-----Aetna palettes---------
aetnaPal <- function(palname){
    if (palname %in% c('green','blue','teal','cranberry','orange','violet'))
    switch(palname,
        green=c("#7AC143","#7D3F98","#F47721","#D20962","#00A78E","#00BCE4",
                "#B8D936","#EE3D94","#FDB933","#F58F9F","#60C3AE","#5F78BB",
                "#5E9732","#CEA979","#EF4135","#7090A5"),
        blue=c("#00BCE4","#D20962","#7AC143","#F47721","#7D3F98","#00A78E",
               "#F58F9F","#B8D936","#60C3AE","#FDB933","#EE3D94","#5E9732",
               "#5F78BB","#CEA979","#EF4135","#7090A5"),
        teal=c("#00A78E","#F47721","#7AC143","#00BCE4","#D20962","#7D3F98",
               "#60C3AE","#FDB933","#B8D936","#5F78BB","#F58F9F","#EE3D94",
               "#5E9732","#CEA979","#EF4135","#7090A5"),
        cranberry=c("#D20962","#00BCE4","#7D3F98","#7AC143","#F47721","#00A78E",
                    "#F58F9F","#60C3AE","#EE3D94","#B8D936","#FDB933","#5E9732",
                    "#5F78BB","#CEA979","#EF4135","#7090A5"),
        orange=c("#F47721","#7AC143","#00A78E","#D20962","#00BCE4","#7D3F98",
                 "#FDB933","#B8D936","#60C3AE","#F58F9F","#5F78BB","#EE3D94",
                 "#5E9732","#CEA979","#EF4135","#7090A5"),
        violet=c("#7D3F98","#7AC143","#F47721","#00A78E","#00BCE4","#D20962",
                 "#F58F9F","#B8D936","#FDB933","#60C3AE","#5F78BB","#EE3D94",
                 "#5E9732","#CEA979","#EF4135","#7090A5")
    )
}
